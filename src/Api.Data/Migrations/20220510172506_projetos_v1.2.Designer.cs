// <auto-generated />
using System;
using Api.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20220510172506_projetos_v1.2")]
    partial class projetos_v12
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Api.Domain.Entities.AtividadeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("atividadeprecedeid")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("atividadeprioridadeid")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("atividadestatusid")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("atribuidoarecursoid")
                        .HasColumnType("char(36)");

                    b.Property<int>("diasatraso")
                        .HasColumnType("int");

                    b.Property<int>("duracao")
                        .HasColumnType("int");

                    b.Property<Guid>("faseprojetoid")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("fim")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("historico")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("inicio")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("marco")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<decimal>("percentualcompleto")
                        .HasColumnType("decimal(65,30)");

                    b.Property<Guid>("projetoid")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("atividadeprecedeid");

                    b.HasIndex("atividadeprioridadeid");

                    b.HasIndex("atividadestatusid");

                    b.HasIndex("atribuidoarecursoid");

                    b.HasIndex("faseprojetoid");

                    b.HasIndex("projetoid");

                    b.ToTable("Atividade");
                });

            modelBuilder.Entity("Api.Domain.Entities.AtividadePrioridadeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("descricao")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("nome")
                        .IsUnique();

                    b.ToTable("AtividadePrioridade");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a867caad-b25f-43ed-9a6d-4c8861687d30"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 130, DateTimeKind.Utc).AddTicks(1221),
                            descricao = "De prioridade baixa.",
                            nome = "BAIXA"
                        },
                        new
                        {
                            Id = new Guid("e8cfca45-1dbe-421b-ad28-e1fbcc03d86a"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 130, DateTimeKind.Utc).AddTicks(1311),
                            descricao = "De prioridade média.",
                            nome = "MEDIA"
                        },
                        new
                        {
                            Id = new Guid("e5e900b9-742d-4c1c-9ddf-b9f2c77506db"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 130, DateTimeKind.Utc).AddTicks(1315),
                            descricao = "De prioridade alta",
                            nome = "ALTA"
                        },
                        new
                        {
                            Id = new Guid("017db0c7-b1da-426c-bdcd-04ebbadc2516"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 130, DateTimeKind.Utc).AddTicks(1339),
                            descricao = "De prioridade mais alta",
                            nome = "MUITO ALTA"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.AtividadeStatusEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("descricao")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("nome")
                        .IsUnique();

                    b.ToTable("AtividadeStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a8a0fec9-4fbb-4b8c-8dfb-b684ecce0002"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 130, DateTimeKind.Utc).AddTicks(9870),
                            descricao = "Atividade Completa.",
                            nome = "COMPLETA"
                        },
                        new
                        {
                            Id = new Guid("fbc4c359-c3ea-408c-ad43-b2f2fd0fada7"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 130, DateTimeKind.Utc).AddTicks(9979),
                            descricao = "Atividade Incompleta.",
                            nome = "INCOMPLETA"
                        },
                        new
                        {
                            Id = new Guid("29fe3813-c4a4-4232-a30c-07df3f68c0fc"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 130, DateTimeKind.Utc).AddTicks(9984),
                            descricao = "Atividade em progresso",
                            nome = "EM-PROGRESSO"
                        },
                        new
                        {
                            Id = new Guid("3f017fa7-abff-4875-a523-be070ca8a183"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 130, DateTimeKind.Utc).AddTicks(9987),
                            descricao = "Atividade não iniciada",
                            nome = "NÃO-INICIADA"
                        },
                        new
                        {
                            Id = new Guid("3042a696-bc65-4b6c-82bf-f4ad663a963d"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 130, DateTimeKind.Utc).AddTicks(9990),
                            descricao = "Atividade em espera.",
                            nome = "EM-ESPERA"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.CartaoTempoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("hdom")
                        .HasColumnType("int");

                    b.Property<int>("hqua")
                        .HasColumnType("int");

                    b.Property<int>("hqui")
                        .HasColumnType("int");

                    b.Property<int>("hsab")
                        .HasColumnType("int");

                    b.Property<int>("hseg")
                        .HasColumnType("int");

                    b.Property<int>("hsex")
                        .HasColumnType("int");

                    b.Property<int>("hter")
                        .HasColumnType("int");

                    b.Property<Guid>("projetoid")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("recursoid")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("semanaini")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("projetoid");

                    b.HasIndex("recursoid");

                    b.ToTable("CartaoTempo");
                });

            modelBuilder.Entity("Api.Domain.Entities.CepEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("varchar(60) CHARACTER SET utf8mb4")
                        .HasMaxLength(60);

                    b.Property<Guid>("MunicipioId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Numero")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Cep");

                    b.HasIndex("MunicipioId");

                    b.ToTable("Cep");
                });

            modelBuilder.Entity("Api.Domain.Entities.DepartamentoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("descricao")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("nome")
                        .IsUnique();

                    b.ToTable("Departamento");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7be4665b-e72f-4a8e-b371-61cc8514c47a"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 131, DateTimeKind.Utc).AddTicks(9749),
                            descricao = "Operações",
                            nome = "Operação"
                        },
                        new
                        {
                            Id = new Guid("003ad2d7-b34c-4e84-9c56-02ef535941da"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 131, DateTimeKind.Utc).AddTicks(9853),
                            descricao = "Financeiro",
                            nome = "Financeiro"
                        },
                        new
                        {
                            Id = new Guid("95cc2696-28ee-45a7-8b7c-2ac7082d47be"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 131, DateTimeKind.Utc).AddTicks(9876),
                            descricao = "Engenharia",
                            nome = "Engenharia"
                        },
                        new
                        {
                            Id = new Guid("2b3d5122-3eff-4aa8-a820-25c0f99d3176"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 131, DateTimeKind.Utc).AddTicks(9881),
                            descricao = "Tecnologia da Informação",
                            nome = "Tecnologia da Informação"
                        },
                        new
                        {
                            Id = new Guid("bec0f472-8610-4e6e-b86a-bcb089cf66f8"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 131, DateTimeKind.Utc).AddTicks(9885),
                            descricao = "Qualidade",
                            nome = "Qualidade"
                        },
                        new
                        {
                            Id = new Guid("b14781c0-6fa3-4fe8-a7fd-972504d533f6"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 131, DateTimeKind.Utc).AddTicks(9888),
                            descricao = "Gestão",
                            nome = "Gestão"
                        },
                        new
                        {
                            Id = new Guid("59aedd05-599f-4b76-bf9a-f67a84bf5f9e"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 131, DateTimeKind.Utc).AddTicks(9892),
                            descricao = "Marketing",
                            nome = "Marketing"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.DocumentoHistoricoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("arquivoblob")
                        .HasColumnType("longblob");

                    b.Property<bool>("atual")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("documentoid")
                        .HasColumnType("char(36)");

                    b.Property<string>("formatoArquivo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("revisao")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("documentoid");

                    b.ToTable("DocumentoHistorico");
                });

            modelBuilder.Entity("Api.Domain.Entities.DocumentoProjetoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("arquivoblob")
                        .HasColumnType("longblob");

                    b.Property<string>("descricao")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("formatoArquivo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("idtipoArquivo")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("projetoid")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("tipoArquivoId")
                        .HasColumnType("char(36)");

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("projetoid");

                    b.HasIndex("tipoArquivoId");

                    b.ToTable("DocumentoProjeto");
                });

            modelBuilder.Entity("Api.Domain.Entities.EmpresaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("descricao")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("nome");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("Api.Domain.Entities.FaseProjetoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("descricao")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("nome")
                        .IsUnique();

                    b.ToTable("FaseProjeto");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dd015770-2b92-4b10-ba9e-2bce2164be74"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 132, DateTimeKind.Utc).AddTicks(7964),
                            descricao = "Fase de PLanejamento",
                            nome = "PLANEJAMENTO"
                        },
                        new
                        {
                            Id = new Guid("c04e1456-599d-4f12-b887-1b2882bef82a"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 132, DateTimeKind.Utc).AddTicks(8083),
                            descricao = "fFase de Ptojeto.",
                            nome = "PROJETO"
                        },
                        new
                        {
                            Id = new Guid("8cba4356-9a28-48c1-a65e-72bd1167a496"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 132, DateTimeKind.Utc).AddTicks(8087),
                            descricao = "Fase de Desenvolvimento.",
                            nome = "DESENVOLVIMENTO"
                        },
                        new
                        {
                            Id = new Guid("ff417a5d-77b1-4188-835b-61553e03b761"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 132, DateTimeKind.Utc).AddTicks(8111),
                            descricao = "Fase de Teste",
                            nome = "TESTE"
                        },
                        new
                        {
                            Id = new Guid("902be417-9965-45b8-8899-77c484af7238"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 132, DateTimeKind.Utc).AddTicks(8115),
                            descricao = "Fase de Produção",
                            nome = "PRODUÇÃO"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.MunicipioEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("CodIBGE")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(60) CHARACTER SET utf8mb4")
                        .HasMaxLength(60);

                    b.Property<Guid>("UfId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CodIBGE");

                    b.HasIndex("UfId");

                    b.ToTable("Municipio");
                });

            modelBuilder.Entity("Api.Domain.Entities.ProjetoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EmpresaId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("custoAtual")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("custoEstimado")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("descricao")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<string>("dono")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("estimativaHora")
                        .HasColumnType("int");

                    b.Property<int>("horaAtual")
                        .HasColumnType("int");

                    b.Property<DateTime>("inicio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("lider")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("nome")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<decimal>("percentualConclusao")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("percentualOrcamento")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("planejamentofim")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("prioridadeGuid")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("prioridadeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("statusGuid")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("statusId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("dono");

                    b.HasIndex("lider");

                    b.HasIndex("prioridadeId");

                    b.HasIndex("statusId");

                    b.ToTable("Projeto");
                });

            modelBuilder.Entity("Api.Domain.Entities.ProjetoPrioridadeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("descricao")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("nome")
                        .IsUnique();

                    b.ToTable("ProjetoPrioridade");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a1f84e6-a84e-4221-b349-75b9118e0562"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 133, DateTimeKind.Utc).AddTicks(5635),
                            descricao = "De prioridade baixa.",
                            nome = "BAIXA"
                        },
                        new
                        {
                            Id = new Guid("a7dba6e8-fcff-4c3c-ade2-ddb3a92413e8"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 133, DateTimeKind.Utc).AddTicks(5736),
                            descricao = "De prioridade média.",
                            nome = "MEDIA"
                        },
                        new
                        {
                            Id = new Guid("2b81ac70-f92e-4d53-86f9-b51b3fe1dde3"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 133, DateTimeKind.Utc).AddTicks(5743),
                            descricao = "De prioridade alta",
                            nome = "ALTA"
                        },
                        new
                        {
                            Id = new Guid("f48fe1ce-991b-4f85-ab84-6bb6f65f17ed"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 133, DateTimeKind.Utc).AddTicks(5748),
                            descricao = "De prioridade mais alta",
                            nome = "MUITO ALTA"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.ProjetoStatusEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("descricao")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("nome")
                        .IsUnique();

                    b.ToTable("ProjetoStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("42faeca0-0b11-46a8-92e4-e9852bafc258"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 134, DateTimeKind.Utc).AddTicks(3393),
                            descricao = "Projeto Completo.",
                            nome = "COMPLETO"
                        },
                        new
                        {
                            Id = new Guid("5be415a1-4b44-4f17-b83b-b94909fc73a5"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 134, DateTimeKind.Utc).AddTicks(3477),
                            descricao = "Projeto ainda em aberto.",
                            nome = "ABERTO"
                        },
                        new
                        {
                            Id = new Guid("1796fadb-8974-4bcf-9732-3ac3533af993"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 134, DateTimeKind.Utc).AddTicks(3502),
                            descricao = "Projeto em progresso",
                            nome = "EM-PROGRESSO"
                        },
                        new
                        {
                            Id = new Guid("c77f7cc2-0bc8-477a-a9d5-0397f349487a"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 134, DateTimeKind.Utc).AddTicks(3505),
                            descricao = "Projeto não iniciado",
                            nome = "NÃO-INICIADO"
                        },
                        new
                        {
                            Id = new Guid("75a99c9f-0d1b-4951-8ce0-811dded40a38"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 134, DateTimeKind.Utc).AddTicks(3509),
                            descricao = "Projeto em espera.",
                            nome = "EM-ESPERA"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.QuestaoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("atualizacoes")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("dataidentificacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("dataresolucao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("diasresolver")
                        .HasColumnType("int");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<Guid>("prioridadeid")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("projetoid")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("recursoCriadorid")
                        .HasColumnType("char(36)");

                    b.Property<string>("resolucao")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<Guid>("statusid")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("prioridadeid");

                    b.HasIndex("projetoid");

                    b.HasIndex("recursoCriadorid");

                    b.HasIndex("statusid");

                    b.ToTable("Questao");
                });

            modelBuilder.Entity("Api.Domain.Entities.QuestaoPrioridadeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("descricao")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("nome")
                        .IsUnique();

                    b.ToTable("QuestaoPrioridade");

                    b.HasData(
                        new
                        {
                            Id = new Guid("800007f0-c40b-4060-a785-21f99b4b53ef"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 135, DateTimeKind.Utc).AddTicks(5589),
                            descricao = "De prioridade baixa.",
                            nome = "BAIXA"
                        },
                        new
                        {
                            Id = new Guid("37a9bf63-acb8-4c1c-a6a2-cb585d4d6005"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 135, DateTimeKind.Utc).AddTicks(5677),
                            descricao = "De prioridade média.",
                            nome = "MEDIA"
                        },
                        new
                        {
                            Id = new Guid("adc372ec-55a2-447a-a34a-6481622e378c"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 135, DateTimeKind.Utc).AddTicks(5681),
                            descricao = "De prioridade alta",
                            nome = "ALTA"
                        },
                        new
                        {
                            Id = new Guid("b9914482-305c-4d55-9eb3-97f7bbd25231"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 135, DateTimeKind.Utc).AddTicks(5703),
                            descricao = "De prioridade mais alta",
                            nome = "MUITO ALTA"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.QuestaoStatusEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("descricao")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("nome")
                        .IsUnique();

                    b.ToTable("QuestaoStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("17bbf5ac-71dc-4f47-8425-575a14e07d38"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 134, DateTimeKind.Utc).AddTicks(8771),
                            descricao = "Questão Fechada.",
                            nome = "FECHADA"
                        },
                        new
                        {
                            Id = new Guid("67b1a4ca-0696-4441-9cbe-7f7bf4a7816d"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 134, DateTimeKind.Utc).AddTicks(8905),
                            descricao = "Uestão Aberta.",
                            nome = "ABERTA"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.RecursoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DepartamentoId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EmpresaId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("cargo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("habilidades")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("observacoes")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("telefone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("valorHora")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Recurso");
                });

            modelBuilder.Entity("Api.Domain.Entities.TipoArquivoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("descricao")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("nome")
                        .IsUnique();

                    b.ToTable("TipoArquivo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2290b8cb-762b-403f-865e-86711cf7d79e"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 136, DateTimeKind.Utc).AddTicks(3233),
                            descricao = "Fase de PLanejamento",
                            nome = "PLANEJAMENTO"
                        },
                        new
                        {
                            Id = new Guid("8eed5cb6-2fae-4ce0-90ba-43dd30e12f97"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 136, DateTimeKind.Utc).AddTicks(3314),
                            descricao = "fFase de Ptojeto.",
                            nome = "PROJETO"
                        },
                        new
                        {
                            Id = new Guid("2cbf199f-890d-4f9a-a284-c5cb05c4d3d8"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 136, DateTimeKind.Utc).AddTicks(3318),
                            descricao = "Fase de Desenvolvimento.",
                            nome = "DESENVOLVIMENTO"
                        },
                        new
                        {
                            Id = new Guid("7185cee5-d8ae-447a-a93d-0b340a22f3fe"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 136, DateTimeKind.Utc).AddTicks(3322),
                            descricao = "Fase de Teste",
                            nome = "TESTE"
                        },
                        new
                        {
                            Id = new Guid("fa33955d-09ca-486f-b6a4-86e866d5aa4d"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 136, DateTimeKind.Utc).AddTicks(3326),
                            descricao = "Fase de Produção",
                            nome = "PRODUÇÃO"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.UfEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45);

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("varchar(2) CHARACTER SET utf8mb4")
                        .HasMaxLength(2);

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Sigla")
                        .IsUnique();

                    b.ToTable("Uf");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22ffbd18-cdb9-45cc-97b0-51e97700bf71"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(2809),
                            Nome = "Acre",
                            Sigla = "AC"
                        },
                        new
                        {
                            Id = new Guid("7cc33300-586e-4be8-9a4d-bd9f01ee9ad8"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(2928),
                            Nome = "Alagoas",
                            Sigla = "AL"
                        },
                        new
                        {
                            Id = new Guid("cb9e6888-2094-45ee-bc44-37ced33c693a"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(2935),
                            Nome = "Amazonas",
                            Sigla = "AM"
                        },
                        new
                        {
                            Id = new Guid("409b9043-88a4-4e86-9cca-ca1fb0d0d35b"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(2941),
                            Nome = "Amapá",
                            Sigla = "AP"
                        },
                        new
                        {
                            Id = new Guid("5abca453-d035-4766-a81b-9f73d683a54b"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(2946),
                            Nome = "Bahia",
                            Sigla = "BA"
                        },
                        new
                        {
                            Id = new Guid("5ff1b59e-11e7-414d-827e-609dc5f7e333"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(2950),
                            Nome = "Ceará",
                            Sigla = "CE"
                        },
                        new
                        {
                            Id = new Guid("bd08208b-bfca-47a4-9cd0-37e4e1fa5006"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(2955),
                            Nome = "Distrito Federal",
                            Sigla = "DF"
                        },
                        new
                        {
                            Id = new Guid("c623f804-37d8-4a19-92c1-67fd162862e6"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(2961),
                            Nome = "Espírito Santo",
                            Sigla = "ES"
                        },
                        new
                        {
                            Id = new Guid("837a64d3-c649-4172-a4e0-2b20d3c85224"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(2965),
                            Nome = "Goiás",
                            Sigla = "GO"
                        },
                        new
                        {
                            Id = new Guid("57a9e9f7-9aea-40fe-a783-65d4feb59fa8"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(2969),
                            Nome = "Maranhão",
                            Sigla = "MA"
                        },
                        new
                        {
                            Id = new Guid("27f7a92b-1979-4e1c-be9d-cd3bb73552a8"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(2974),
                            Nome = "Minas Gerais",
                            Sigla = "MG"
                        },
                        new
                        {
                            Id = new Guid("3739969c-fd8a-4411-9faa-3f718ca85e70"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(2978),
                            Nome = "Mato Grosso do Sul",
                            Sigla = "MS"
                        },
                        new
                        {
                            Id = new Guid("29eec4d3-b061-427d-894f-7f0fecc7f65f"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(2982),
                            Nome = "Mato Grosso",
                            Sigla = "MT"
                        },
                        new
                        {
                            Id = new Guid("8411e9bc-d3b2-4a9b-9d15-78633d64fc7c"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(2986),
                            Nome = "Pará",
                            Sigla = "PA"
                        },
                        new
                        {
                            Id = new Guid("1109ab04-a3a5-476e-bdce-6c3e2c2badee"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(2990),
                            Nome = "Paraíba",
                            Sigla = "PB"
                        },
                        new
                        {
                            Id = new Guid("ad5969bd-82dc-4e23-ace2-d8495935dd2e"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(2994),
                            Nome = "Pernambuco",
                            Sigla = "PE"
                        },
                        new
                        {
                            Id = new Guid("f85a6cd0-2237-46b1-a103-d3494ab27774"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(2998),
                            Nome = "Piauí",
                            Sigla = "PI"
                        },
                        new
                        {
                            Id = new Guid("1dd25850-6270-48f8-8b77-2f0f079480ab"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(3159),
                            Nome = "Paraná",
                            Sigla = "PR"
                        },
                        new
                        {
                            Id = new Guid("43a0f783-a042-4c46-8688-5dd4489d2ec7"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(3164),
                            Nome = "Rio de Janeiro",
                            Sigla = "RJ"
                        },
                        new
                        {
                            Id = new Guid("542668d1-50ba-4fca-bbc3-4b27af108ea3"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(3168),
                            Nome = "Rio Grande do Norte",
                            Sigla = "RN"
                        },
                        new
                        {
                            Id = new Guid("924e7250-7d39-4e8b-86bf-a8578cbf4002"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(3173),
                            Nome = "Rondônia",
                            Sigla = "RO"
                        },
                        new
                        {
                            Id = new Guid("9fd3c97a-dc68-4af5-bc65-694cca0f2869"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(3177),
                            Nome = "Roraima",
                            Sigla = "RR"
                        },
                        new
                        {
                            Id = new Guid("88970a32-3a2a-4a95-8a18-2087b65f59d1"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(3181),
                            Nome = "Rio Grande do Sul",
                            Sigla = "RS"
                        },
                        new
                        {
                            Id = new Guid("b81f95e0-f226-4afd-9763-290001637ed4"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(3185),
                            Nome = "Santa Catarina",
                            Sigla = "SC"
                        },
                        new
                        {
                            Id = new Guid("fe8ca516-034f-4249-bc5a-31c85ef220ea"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(3190),
                            Nome = "Sergipe",
                            Sigla = "SE"
                        },
                        new
                        {
                            Id = new Guid("e7e416de-477c-4fa3-a541-b5af5f35ccf6"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(3194),
                            Nome = "São Paulo",
                            Sigla = "SP"
                        },
                        new
                        {
                            Id = new Guid("971dcb34-86ea-4f92-989d-064f749e23c9"),
                            CreateAt = new DateTime(2022, 5, 10, 17, 25, 6, 129, DateTimeKind.Utc).AddTicks(3199),
                            Nome = "Tocantins",
                            Sigla = "TO"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(60) CHARACTER SET utf8mb4")
                        .HasMaxLength(60);

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0bc8933-d455-435b-9bfc-ec88cc35dfd6"),
                            CreateAt = new DateTime(2022, 5, 10, 14, 25, 6, 123, DateTimeKind.Local).AddTicks(5756),
                            Email = "edervelludo@mail.com",
                            Name = "Administrador",
                            UpdateAt = new DateTime(2022, 5, 10, 14, 25, 6, 125, DateTimeKind.Local).AddTicks(1053)
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.AtividadeEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.AtividadeEntity", "atividadeprecede")
                        .WithMany()
                        .HasForeignKey("atividadeprecedeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.AtividadePrioridadeEntity", "atividadeprioridade")
                        .WithMany("atividades")
                        .HasForeignKey("atividadeprioridadeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.AtividadeStatusEntity", "atividadestatus")
                        .WithMany("atividades")
                        .HasForeignKey("atividadestatusid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.RecursoEntity", "atribuidoarecurso")
                        .WithMany("atividades")
                        .HasForeignKey("atribuidoarecursoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.FaseProjetoEntity", "faseprojeto")
                        .WithMany("atividades")
                        .HasForeignKey("faseprojetoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.ProjetoEntity", "projeto")
                        .WithMany("atividades")
                        .HasForeignKey("projetoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.CartaoTempoEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.ProjetoEntity", "projeto")
                        .WithMany("cartoesTempo")
                        .HasForeignKey("projetoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.RecursoEntity", "recurso")
                        .WithMany("cartoresTempo")
                        .HasForeignKey("recursoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.CepEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.MunicipioEntity", "Municipio")
                        .WithMany("Ceps")
                        .HasForeignKey("MunicipioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.DocumentoHistoricoEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.DocumentoProjetoEntity", "documento")
                        .WithMany("historico")
                        .HasForeignKey("documentoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.DocumentoProjetoEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.ProjetoEntity", "projeto")
                        .WithMany("documentos")
                        .HasForeignKey("projetoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.TipoArquivoEntity", "tipoArquivo")
                        .WithMany("documentos")
                        .HasForeignKey("tipoArquivoId");
                });

            modelBuilder.Entity("Api.Domain.Entities.MunicipioEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.UfEntity", "Uf")
                        .WithMany("Municipios")
                        .HasForeignKey("UfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.ProjetoEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.EmpresaEntity", "Empresa")
                        .WithMany("Projetos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.ProjetoPrioridadeEntity", "prioridade")
                        .WithMany("projetos")
                        .HasForeignKey("prioridadeId");

                    b.HasOne("Api.Domain.Entities.ProjetoStatusEntity", "status")
                        .WithMany("projetos")
                        .HasForeignKey("statusId");
                });

            modelBuilder.Entity("Api.Domain.Entities.QuestaoEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.QuestaoPrioridadeEntity", "prioridade")
                        .WithMany("questoes")
                        .HasForeignKey("prioridadeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.ProjetoEntity", "projeto")
                        .WithMany("questoes")
                        .HasForeignKey("projetoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.RecursoEntity", "recursoCriador")
                        .WithMany("questoesCriadas")
                        .HasForeignKey("recursoCriadorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.QuestaoStatusEntity", "status")
                        .WithMany("questoes")
                        .HasForeignKey("statusid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.RecursoEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.DepartamentoEntity", "Departamento")
                        .WithMany("Recursos")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Domain.Entities.EmpresaEntity", "Empresa")
                        .WithMany("Recursos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
